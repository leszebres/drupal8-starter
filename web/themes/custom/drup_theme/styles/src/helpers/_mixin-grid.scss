/**
 * $center-v: start/center/end
 * $center-h: start/center/end/around/beween
 */
@mixin grid-wrapper($gutter: $grid--gutter-width, $center-v: null, $center-h: null) {
    display: flex;
    flex-wrap: wrap;

    @if ($gutter > 0) {
        margin-left: -$gutter/2;
        margin-right: -$gutter/2;
    }

    @if ($center-v != null) {
        align-items: $center-v;
    }
    @if ($center-h != null) {
        justify-content: $center-h;
    }
}

/*

 */
@mixin grid-col-init($height-equal: false) {
    position: relative;

    @if ($height-equal == true) {
        display: flex;
    }
    width: 100%;
    max-width: 100%;
    min-height: 1px;
    box-sizing: border-box;
}

@mixin grid-col-generate(
    $columns,
    $gutter-left,
    $gutter-right,
    $margin-b,
    $center-v
) {
    margin-bottom: $margin-b;
    padding-left: $gutter-left/2;
    padding-right: $gutter-right/2;

    @if ($columns == 'auto') {
        flex: 1;

    } @elseif (type-of($columns) == 'number') {
        $percent: percentage($columns / $grid--columns-nb);

        @if ($percent == 0 or $percent == 50 or $percent == 100) {
            flex: 0 0 auto;
        } @else {
            flex: 0 0 $percent;
        }
        max-width: $percent;
    }

    @if ($center-v != 'start') {
        align-self: $center-v;
    }
}

/**
 * breakpoint : min width breakpoint
 * $columns: int or string = inline list
 * $center-v: start/center/end
 */
@mixin grid-col-set(
    $breakpoint: default,
    $columns: 'auto',
    $gutter-left: $grid--gutter-width,
    $gutter-right: $grid--gutter-width,
    $margin-b: $grid--gutter-width,
    $center-v: start
) {
    @if (type_of($breakpoint) != null and $breakpoint != "default") {
        $min: media-breakpoint-get($breakpoint);
        @include media-breakpoint-min($min) {
            @include grid-col-generate($columns, $gutter-left, $gutter-right, $margin-b, $center-v);
        }
    } @else {
        @include grid-col-generate($columns, $gutter-left, $gutter-right, $margin-b, $center-v);
    }
}
