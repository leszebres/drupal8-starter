<?php

/**
 * @file
 * Contains drup.module.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Language\LanguageInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\Markup;

use Drupal\drup\DrupCommon;

/**
 * @param array $settings
 */
function drup_editor_js_settings_alter(array &$settings) {
    $settings['editor']['formats']['html_basic']['editorSettings']['bodyClass'] = ['node-body'];
    $settings['editor']['formats']['html_basic']['editorSettings']['format_tags'] = 'p;h2;h3;h4';
}

/**
 * @param $links
 */
function drup_menu_links_discovered_alter(&$links) {
    $links['drup.admin_list'] = [
        'title' => t('Drup'),
        'route_name' => 'drup_settings.admin_form',
        'menu_name' => 'admin',
        'parent' => 'system.admin_config',
        'weight' => -40,
    ];
}



/**
 * @param \Drupal\Core\Database\Query\AlterableInterface $query
 */
function drup_query_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
    if (isset($query->alterMetaData['view'])) {
//        if ($query->alterMetaData['view']->storage->id() === 'healthreview_article') {
//            if ($query->alterMetaData['view']->current_display === 'similar_content') {
//                $query->groupBy('node_field_data.nid');
//                $query->groupBy('node_field_data.langcode');
//            }
//        }
    }
}

/**
 * Implements hook_entity_access().
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 */
function drup_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {

}

/**
 * Implements hook_node_access().
 */
function drup_node_access(NodeInterface $node, $op, AccountInterface $account) {
    // 403 status if node is not translated
    $isAllowed = DrupCommon::isNodeTranslated($node);
    $access = ($isAllowed === true) ? AccessResult::neutral() : AccessResult::forbidden();
    $access->addCacheableDependency($node);
    
    return $access;
}

/**
 * Implements hook_preprocess_menu().
 * @param $variables
 */
function drup_preprocess_menu(&$variables) {
    $language = Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();

    // Unset untranslated menu items
    if (isset($variables['menu_name']) && in_array($variables['menu_name'], ['main', 'secondary', 'footer'])) {
        foreach ($variables['items'] as $menuId => $menuItem) {
            if (!$variables['items'][$menuId] = DrupCommon::checkMenuItemTranslation($menuItem, $language)) {
                unset($variables['items'][$menuId]);
            }
        }
    }
}


/**
 * Link text are HTML fiendly
 *
 * @param $variables
 */
function drup_link_alter(&$variables) {
    $variables['text'] = Markup::create($variables['text']);
}


/**
 * Implements hook_language_switch_links_alter().
 */
function drup_language_switch_links_alter(array &$links, $type, $path) {
    $currentEntity = DrupCommon::getPageEntity(true);
    $isEntity = ($currentEntity->entity !== null);

    foreach ($links as $langCode => &$link) {
        $link['title'] = ucfirst($langCode);

        // Redirect untranslated entity to <front>
        if ($isEntity && method_exists($currentEntity->entity, 'getTranslation')) {
            try {
                if ($currentEntity->entity->getTranslation($langCode)->access('view')) {
                    //
                }
            }
            catch (\InvalidArgumentException $e) {
                $link['attributes']['class'][] = 'not-translated';
                $link['url'] = Url::fromRoute('<front>', [], ['language' => Drupal::languageManager()->getLanguage($langCode)]);
            }
        }
    }
}

/**
 * Implements hook_token_info().
 */
function drup_token_info() {
//    $info = [];
//    $info['tokens']['node']['description_custom'] = [
//        'name' => 'Custom description',
//        'description' => 'Custom node meta description from several fields',
//    ];
//
//    return $info;
}

/**
 * Implements hook_tokens().
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
 */
function drup_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
//    $replacements = [];
//
//    if ($type === 'node') {
//        foreach ($tokens as $name => $original) {
//            if ($name === 'description_custom') {
//                $node = $data['node'];
//                $drupField = new DrupEntityField($node);
//
//                if ($fieldSubtitle = $drupField->get('subtitle_html')) {
//                    $description = $fieldSubtitle->value;
//                } elseif ($fieldDescription = $drupField->get('body_layout')) {
//                    if (!empty($fieldDescription)) {
//                        foreach ($fieldDescription as $paragraphItem) {
//                            if (!empty($paragraphItem->entity) && (isset($paragraphItem->entity->field_body))) {
//                                $description = $paragraphItem->entity->field_body->value;
//                                break;
//                            }
//                        }
//                    }
//                } elseif ($fieldBody = $drupField->get('body')) {
//                    $description = $fieldBody->value;
//                }
//
//                if (empty($description)) {
//
//                } else {
//                    $description = DrupCommon::trimString($description, 250);
//                    $replacements[$original] = $description;
//                }
//            }
//        }
//    }
//
//    return $replacements;
}

/**
 * @param $variables
 */
function drup_preprocess_swiftmailer(&$variables) {
    $theme = \Drupal::theme()->getActiveTheme();
    $variables['logo'] = $variables['base_url'] . '/' . $theme->getPath() . '/images/logo-mail.png';
    
    $drupSettings = new \Drupal\drup_settings\DrupSettings();
    $variables['site_name'] = $drupSettings->getValue('site_name');

//    echo '<pre>';
//    var_dump($variables);
//    echo '</pre>';
//    die;
}


/**
 * Implements hook_page_attachments_alter().
 * @param array $attachments
 */
function drup_page_attachments_alter(array &$attachments) {
    DrupCommon::removeHeaderLinks($attachments);
}

/**
 * Implements hook_entity_view_alter().
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 */
function drup_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
    if ($entity Instanceof NodeInterface && $build['#view_mode'] === 'full') {
        DrupCommon::removeHeaderLinks($build);
    }
}

/**
 * Implements hook_module_implements_alter().
 * @param $implementations
 * @param $hook
 */
function drup_module_implements_alter(&$implementations, $hook) {
    if ($hook === 'page_attachments_alter') {
        $group = $implementations['drup'];
        unset($implementations['drup']);
        $implementations['drup'] = $group;
    }
}
